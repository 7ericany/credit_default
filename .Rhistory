X <- nume_train_nna[, ~which(names(nume_train_nna) == "TARGET")]
X <- nume_train_nna[, -which(names(nume_train_nna) == "TARGET")]
loglm <- lm(data=nume_train_nna, TARGET ~ ., family='binomial')
?lm
loglm <- glm(data=nume_train_nna, TARGET ~ ., family="binomial")
summary(loglm)
train_lm = nume_train_nna %>% sample_frac(0.8)
val = nume_train_nna %>% setdiff(train_lm)
loglm <- glm(data=train_lm, TARGET ~ ., family="binomial")
##################### basic basic model ########################
# just to get a sense
# non-missing, integer/numeric
library(caret)
my_model <- train(TARGET ~. ,data=nume_train_nna, method="glm",
trControl=trainControl(method="cv"),
family="binomial")
summary(my_model)
################### EDA #####################
library(ggcorrplot)
install.packages(ggcorrplot)
install.packages("ggcorrplot")
################### EDA #####################
library(ggcorrplot)
cor(nume_train_nna)
ggplot(cor_matrix, hc.order=T, type="lower", lab=T,
lab_size=3)
cor_matrix = cor(nume_train_nna)
ggplot(cor_matrix, hc.order=T, type="lower", lab=T,
lab_size=3)
class(cor_matrix)
cor_matrix = as.data.frame(cor(nume_train_nna))
ggplot(cor_matrix, hc.order=T, type="lower", lab=T,
lab_size=3)
ggcorrplot(cor_matrix, hc.order=T, type="lower", lab=T,
lab_size=3)
cor_matrix
nume_train_nna%>% summarise_all(~ sum(is.na(.)))
select(nume_train_nna, FLAG_DOCUMENT_2)
# drop FLAG_DOCUMENT_2
nume_train_nna <- nume_train_nna[, -which(names(nume_train_nna) == "FLAG_DOCUMENT_2")]
train_lm = nume_train_nna %>% sample_frac(0.8)
val = nume_train_nna %>% setdiff(train_lm)
loglm <- glm(data=train_lm, TARGET ~ ., family="binomial")
my_model <- train(TARGET ~. ,data=nume_train_nna, method="glm",
trControl=trainControl(method="cv"),
family="binomial")
summary(my_model)
################### EDA #####################
cor_matrix = as.data.frame(cor(nume_train_nna))
cor_matrix
# FLAG_DOCUMENT_2
ggcorrplot(cor_matrix, hc.order=T, type="lower", lab=T,
lab_size=3)
View(cor_matrix)
View(cor_matrix)
select(nume_train_nna, FLAG_MOBIL)
nume_train_nna <- nume_train_nna[, -which(names(nume_train_nna) == "FLAG_MOBIL")]
train_lm = nume_train_nna %>% sample_frac(0.8)
val = nume_train_nna %>% setdiff(train_lm)
################### EDA #####################
cor_matrix = as.data.frame(cor(nume_train_nna))
# FLAG_DOCUMENT_2
ggcorrplot(cor_matrix, hc.order=T, type="lower", lab=T,
lab_size=3)
View(cor_matrix)
View(cor_matrix)
# FLAG_DOCUMENT_2
ggcorrplot(cor_matrix, type="lower", lab=T,
lab_size=3)
# FLAG_DOCUMENT_2
ggcorrplot(cor_matrix)
# FLAG_DOCUMENT_2
ggcorrplot(cor_matrix)
library(ggplot2)
library(reshape2)
library(dslabs)
library(tidyverse)
library(dplyr)
library(ggcorrplot)
##################### Load training data ########################
data_folder = "~/Downloads/home-credit-default-risk/"
train = as.data.frame(read.csv(paste(data_folder, "application_train.csv", sep='')))
# convert to data frame
# train <- do.call(rbind.data.frame, train)
class(train)
##################### Preprocessing ########################
# show number of missing values in each col
train %>% summarise_all(~ sum(is.na(.)))
sapply(train, class)
numeric_train = train[, unlist(lapply(train, is.numeric))]
View(numeric_train)
View(numeric_train)
numeric_ftrs = colnames(train[, unlist(lapply(train, is.numeric))])
cat_ftrs = setdiff(colnames(train), numeric_ftrs)
############ Encode categorical features #############
encode_ordinal <- function(x, order = unique(x)) {
x <- as.numeric(factor(x, levels = order, exclude = NULL))
x
}
cat_ftrs
## get the list of numeric features
table(train[["NAME_CONTRACT_TYPE"]], encode_ordinal(train[["NAME_CONTRACT_TYPE"]]), useNA = "ifany")
encode_ordinal(train[["NAME_CONTRACT_TYPE"]])
train[["NAME_CONTRACT_TYPE"]]
## get the list of numeric features
fileConn<-file("categorical_mapping.txt")
writeLines(table(train[["NAME_CONTRACT_TYPE"]],
encode_ordinal(train[["NAME_CONTRACT_TYPE"]]), useNA = "ifany"), fileConn)
close(fileConn)
## get the list of numeric features
fileConn<-file("categorical_mapping.txt")
write(table(train[["NAME_CONTRACT_TYPE"]],
encode_ordinal(train[["NAME_CONTRACT_TYPE"]]), useNA = "ifany"),
fileConn)
close(fileConn)
table(train[["NAME_CONTRACT_TYPE"]],
encode_ordinal(train[["NAME_CONTRACT_TYPE"]]), useNA = "ifany")
table <- table(train[["NAME_CONTRACT_TYPE"]],
encode_ordinal(train[["NAME_CONTRACT_TYPE"]]), useNA = "ifany")
colnames(table)
rownames(table)
write(rownames(table), fileConn)
write('\n', fileConn)
## get the list of numeric features
fileConn<-file("categorical_mapping.txt")
write(rownames(table), fileConn)
write('\n', fileConn)
write(colnames(table), fileConn)
close(fileConn)
table <- table(train[["NAME_CONTRACT_TYPE"]],
encode_ordinal(train[["NAME_CONTRACT_TYPE"]]), useNA = "ifany")
rownames(table)
## get the list of numeric features
fileConn<-file("categorical_mapping.txt")
table <- table(train[["NAME_CONTRACT_TYPE"]],
encode_ordinal(train[["NAME_CONTRACT_TYPE"]]), useNA = "ifany")
write(rownames(table), fileConn)
write('\n', fileConn)
write(colnames(table), fileConn)
close(fileConn)
## get the list of numeric features
fileConn<-file("categorical_mapping.txt")
sink(file = "categorical_mapping.txt")
table(train[["NAME_CONTRACT_TYPE"]],
encode_ordinal(train[["NAME_CONTRACT_TYPE"]]), useNA = "ifany")
sink(file = NULL)
## get the list of numeric features
fileConn<-file("categorical_mapping.txt")
sink(file = "categorical_mapping.txt")
col <- "NAME_CONTRACT_TYPE"
col
table(train[["NAME_CONTRACT_TYPE"]],
encode_ordinal(train[["NAME_CONTRACT_TYPE"]]), useNA = "ifany")
sink(file = NULL)
## get the list of numeric features
fileConn<-file("categorical_mapping.txt")
col <- "NAME_CONTRACT_TYPE"
sink(file = "categorical_mapping.txt")
col
table(train[["NAME_CONTRACT_TYPE"]],
encode_ordinal(train[["NAME_CONTRACT_TYPE"]]), useNA = "ifany")
sink(file = NULL)
# fileConn<-file("categorical_mapping.txt")
sink(file = "categorical_mapping.txt")
for (i in 1:16){
ftr = cat_ftrs[i]
ftr
table(train[[ftr]],
encode_ordinal(train[[ftr]]), useNA = "ifany")
}
sink(file = NULL)
# fileConn<-file("categorical_mapping.txt")
sink(file = "categorical_mapping.txt")
for (i in 1:16){
ftr = cat_ftrs[i]
ftr
table(train[[ftr]],
encode_ordinal(train[[ftr]]), useNA = "ifany")
}
sink(file = NULL)
for (i in 1:16){
sink(file = "categorical_mapping.txt")
ftr = cat_ftrs[i]
ftr
table(train[[ftr]],
encode_ordinal(train[[ftr]]), useNA = "ifany")
sink(file = NULL)
}
for (i in 1:16){
# sink(file = "categorical_mapping.txt")
ftr = cat_ftrs[i]
ftr
table(train[[ftr]],
encode_ordinal(train[[ftr]]), useNA = "ifany")
# sink(file = NULL)
}
for (i in 1:16){
# sink(file = "categorical_mapping.txt")
ftr = cat_ftrs[i]
print(ftr)
table(train[[ftr]],
encode_ordinal(train[[ftr]]), useNA = "ifany")
# sink(file = NULL)
}
print(table(train[[ftr]],
encode_ordinal(train[[ftr]]), useNA = "ifany"))
# sink(file = "categorical_mapping.txt")
ftr = cat_ftrs[i]
ftr
print(table(train[[ftr]],
encode_ordinal(train[[ftr]]), useNA = "ifany"))
for (i in 1:16){
# sink(file = "categorical_mapping.txt")
ftr = cat_ftrs[i]
ftr
print(table(train[[ftr]],
encode_ordinal(train[[ftr]]), useNA = "ifany"))
# sink(file = NULL)
}
for (i in 1:16){
sink(file = "categorical_mapping.txt")
ftr = cat_ftrs[i]
ftr
table(train[[ftr]],
encode_ordinal(train[[ftr]]), useNA = "ifany")
sink()
}
# for (i in 1:16){
i = 1
sink(file = "categorical_mapping.txt")
ftr = cat_ftrs[i]
ftr
table(train[[ftr]],
encode_ordinal(train[[ftr]]), useNA = "ifany")
sink()
# for (i in 1:16){
i = 2
sink(file = "categorical_mapping.txt")
ftr = cat_ftrs[i]
ftr
table(train[[ftr]],
encode_ordinal(train[[ftr]]), useNA = "ifany")
sink()
# for (i in 1:16){
i = 2
sink(file = "categorical_mapping.txt", append = T)
ftr = cat_ftrs[i]
ftr
table(train[[ftr]],
encode_ordinal(train[[ftr]]), useNA = "ifany")
sink()
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
ftr = cat_ftrs[i]
ftr
table(train[[ftr]],
encode_ordinal(train[[ftr]]), useNA = "ifany")
sink()
}
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
print(cat_ftrs[i])
print(table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]), useNA = "ifany"))
sink()
}
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
print(i, cat_ftrs[i])
print(table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]), useNA = "ifany"))
print('\n')
sink()
}
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
print(cat(i, cat_ftrs[i]))
print(table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]), useNA = "ifany"))
print('\n\n')
sink()
}
i
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
print(cat(i, cat_ftrs[i]))
table <- table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]), useNA = "ifany")
print(colnames((table)))
print(rownames(table))
print(cat('\n\n'))
sink()
}
c(rownames(table), colnames((table)))
table
table <- table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]), useNA = "ifany")
table
i = 1
table <- table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]), useNA = "ifany")
table
x = [1,2]
x = c(1,2)
y = c(3,4)
c(x,y)
vcat(x,t)
vcat(x,y)
rbind(x,y)
z = rbind(x,y)
z
i = 1
table <- table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]))
frame <- data.frame(colnames((table)), rownames(table))
frame
sink()
i = 1
table <- table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]))
frame <- data.frame(colnames((table)), rownames(table))
frame
frame <- data.frame(categorial=rownames(table), encoding=colnames((table)))
frame
print(colnames((table)), rownames(table))
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
print(cat(i, cat_ftrs[i]))
table <- table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]))
print(data.frame(categorial=rownames(table), encoding=colnames((table))))
# print(colnames((table)), rownames(table))
print()
sink()
}
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
print(cat(i, cat_ftrs[i]))
table <- table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]))
print(data.frame(categorial=rownames(table), encoding=colnames((table))))
# print(colnames((table)), rownames(table))
print(" ")
sink()
}
c(" ")
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
print(cat("Feature", i, cat_ftrs[i]))
table <- table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]))
print(data.frame(categorial=rownames(table), encoding=colnames((table))))
# print(colnames((table)), rownames(table))
print(c(" "))
sink()
}
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
print(cat("Feature", i, cat_ftrs[i]))
table <- table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]))
print(cat(data.frame(categorial=rownames(table), encoding=colnames((table)))),
sep='\n\n')
# print(colnames((table)), rownames(table))
# print(c(" "))
sink()
}
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
print(cat("Feature", i, cat_ftrs[i]))
table <- table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]))
print(cat(data.frame(categorial=rownames(table), encoding=colnames((table))),
sep='\n\n'))
# print(colnames((table)), rownames(table))
# print(c(" "))
sink()
}
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
table <- table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]))
print(data.frame(categorial=rownames(table), encoding=colnames((table))))
print(cat("Feature", i, cat_ftrs[i], sep="\n\n"))
# print(colnames((table)), rownames(table))
# print(c(" "))
sink()
}
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
print("Feature", i, cat_ftrs[i])
table <- table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]))
print(data.frame(categorial=rownames(table), encoding=colnames((table))))
# print(colnames((table)), rownames(table))
print(cat(" ", " ", sep="\n"))
sink()
}
sink(file = "categorical_mapping.txt", append = T)
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
print("Feature", i, cat_ftrs[i])
table <- table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]))
print(data.frame(categorial=rownames(table), encoding=colnames((table))))
# print(colnames((table)), rownames(table))
print(cat(" ", sep="\n"))
sink()
}
i = 1
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
print(cat("Feature", i, cat_ftrs[i]))
table <- table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]))
print(data.frame(categorial=rownames(table), encoding=colnames((table))))
# print(colnames((table)), rownames(table))
print(cat(" ", sep="\n"))
sink()
}
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
print(cat("No.", i, cat_ftrs[i]))
table <- table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]))
print(data.frame(categorial=rownames(table), encoding=colnames((table))))
# print(colnames((table)), rownames(table))
print(cat("----------------", sep="\n"))
sink()
}
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
print(cat("No.", i, cat_ftrs[i]))
table <- table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]))
print(data.frame(categorial=rownames(table), encoding=colnames((table))))
# print(colnames((table)), rownames(table))
print("------------------------------------------------")
sink()
}
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
print(cat("No.", i, cat_ftrs[i]))
table <- table(train[[cat_ftrs[i]]],
encode_ordinal(train[[cat_ftrs[i]]]))
print(data.frame(categorial=rownames(table), encoding=colnames((table))))
# print(colnames((table)), rownames(table))
print(cat("------------------------------------------------"))
sink()
}
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
print(cat("No.", i, cat_ftrs[i]))
encoding <- encode_ordinal(train[[cat_ftrs[i]]])
table <- table(train[[cat_ftrs[i]]], encoding)
train[[cat_ftrs[i]]] <- encoding
print(data.frame(categorial=rownames(table), encoding=colnames((table))))
print(colnames((table)), rownames(table))
print(cat("------------------------------------------------"))
sink()
}
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
print(cat("No.", i, cat_ftrs[i]))
train[[cat_ftrs[i]]][train[[cat_ftrs[i]]] == ''] <- NA
encoding <- encode_ordinal(train[[cat_ftrs[i]]])
table <- table(train[[cat_ftrs[i]]], encoding)
train[[cat_ftrs[i]]] <- encoding
print(data.frame(categorial=rownames(table), encoding=colnames((table))))
print(colnames((table)), rownames(table))
print(cat("------------------------------------------------"))
sink()
}
View(train)
View(train)
for (i in 1:16){
sink(file = "categorical_mapping.txt", append = T)
print(cat("No.", i, cat_ftrs[i]))
train[cat_ftrs[i]][train[cat_ftrs[i]]==''] <- "<NA>"
encoding <- encode_ordinal(train[[cat_ftrs[i]]])
table <- table(train[[cat_ftrs[i]]], encoding)
train[[cat_ftrs[i]]] <- encoding
print(data.frame(categorial=rownames(table), encoding=colnames((table))))
print(colnames((table)), rownames(table))
print(cat("------------------------------------------------"))
sink()
}
View(train)
View(train)
ftr='OCCUPATION_TYPE'
trian[ftr]
train[ftr]
train[[ftr]]
sink()
train[[ftr]]
##################### Load training data ########################
data_folder = "~/Downloads/home-credit-default-risk/"
train = as.data.frame(read.csv(paste(data_folder, "application_train.csv", sep='')))
ftr
ftr="OCCUPATION_TYPE"
train[ftr]
train[[ftr]]
train[, ftr]
train["OCCUPATION_TYPE"]
i = 1
sink()
i
i
sink(NULL)
i
i = 1
i
